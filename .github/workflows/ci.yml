name: CI

on:
  push:
    branches:
      - master
  create:
    tags:

jobs:

  stylecheck:
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
          architecture: x64
      - name: Install stylechecker
        run: pip install flake8
      - name: Run stylecheck
        run: flake8 .

  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        python-version: ['3.8']
        os: ['ubuntu-18.04']
    
    steps:
      - uses: actions/checkout@v1
      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Install nosetests
        run: pip install nose # for code coverage: coverage
      - name: Run tests
        run: python setup.py nosetests --with-doctest
        # want to run code coverage? Uncomment and change cover-min-percentage and cover-package
        # run: python setup.py nosetests --with-doctest --with-coverage --cover-html --cover-html-dir=coverage --cover-package=YOUR_PACKAGE_NAME --cover-branches --cover-erase --cover-min-percentage=80

  dist:
    runs-on: ubuntu-18.04
    if: github.event_name == 'create'

    steps:
      - uses: actions/checkout@v1
      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
          architecture: x64
      - name: Install wheel package
        run: pip install wheel
      - name: Build wheel and source distribution
        run: python setup.py sdist bdist_wheel
      - name: Upload dist artifact
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: dist

  publish:
    needs: [dist, test]
    runs-on: ubuntu-18.04
    if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Setup python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
          architecture: x64
      - name: Download dist
        uses: actions/download-artifact@v1
        with:
          name: dist
      - name: Install twine
        run: pip install twine
      - name: Upload to PyPI
        env:
          TWINE_USERNAME: '__token__'
          TWINE_PASSWORD: ${{ secrets.PYPI_API_KEY }}
        run: twine upload dist/*
